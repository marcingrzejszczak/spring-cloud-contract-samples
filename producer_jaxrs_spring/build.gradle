plugins {
	id 'groovy'
	id 'org.springframework.boot'
	id 'io.spring.dependency-management'
	id 'org.springframework.cloud.contract'
	id 'maven-publish'
}

println "Boot Version [${bootVersion}], Cloud version [${BOM_VERSION}], Contract version [${verifierVersion}]"

group = 'com.example'
version = '0.0.1-SNAPSHOT'

repositories {
	mavenCentral()
	mavenLocal()
	maven { url "https://repo.spring.io/snapshot" }
}

dependencies {
  implementation(platform("org.springframework.cloud:spring-cloud-dependencies:${BOM_VERSION}"))
}


dependencies {
	implementation("org.springframework.boot:spring-boot-starter-jersey")
	implementation("org.springframework.boot:spring-boot-starter-jetty")
	
	
	testImplementation("org.springframework.cloud:spring-cloud-starter-contract-verifier")
	

	// for compatibility
	testImplementation('org.junit.jupiter:junit-jupiter-engine')
}


contracts {
	contractsDslDir = file("src/test/resources/contracts")
	testFramework = "JUNIT5"
	packageWithBaseClasses = 'com.example'
	testMode = "JAXRSCLIENT"
}

test {
	failOnNoDiscoveredTests = false
}

contractTest {
	useJUnitPlatform()
	testLogging {
		exceptionFormat = 'full'
	}
	afterSuite { desc, result ->
		if (!desc.parent) {
			println "Results: (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
			boolean skipTests = Boolean.parseBoolean(project.findProperty('SKIP_TESTS') ?: "false")
			if (result.testCount == 0 && !skipTests) {
				throw new IllegalStateException("No tests were found. Failing the build")
			}
		}
	}
}


publishing {
	publications {
		mavenJava(MavenPublication) {
			artifact bootJar
			
			artifact verifierStubsJar

			// https://github.com/spring-gradle-plugins/dependency-management-plugin/issues/273
			versionMapping {
				usage("java-api") {
					fromResolutionOf("runtimeClasspath")
				}
				usage("java-runtime") {
					fromResolutionResult()
				}
			}
		}
	}
}

// https://github.com/jfrog/build-info/issues/198
task fixPom {
    doLast {
        File file = new File("$buildDir/publications/mavenJava/pom-default.xml")
        def text = file.text
        def pattern = "(?s)(<dependencyManagement>.+?<dependencies>)(.+?)(</dependencies>.+?</dependencyManagement>)"
        def matcher = text =~ pattern
        if (matcher.find()) {
            text = text.replaceFirst(pattern, "")
            def firstDeps = matcher.group(2)
            text = text.replaceFirst(pattern, '$1$2' + firstDeps + '$3')
        }
        file.write(text)
    }
}
generatePomFileForMavenJavaPublication.finalizedBy fixPom
